생성자
	- 클래스를 생성할 때 사용하는 함수
	- 클래스명과 동일한 함수
    - 데이터 영역 메모리(코드 && 상수 영역)
        - class -> 클래스 로더 -> 데이터 영역 코드 영역에 구성, Class 객체를 생성 - 클래스의 정보가 덤겨 있는 객체
        - 모든 클래스의 class 정적 변수, Object 클래스의 getClass()접근 가능
/////////////////////////////////////

    데이터 영역 메모리 -> new Student
        class Student
            int id
            String name
            String subject

            메스드 영역
            void study()...

    스택 영역 메모리

    main()
        stydent s1

    힙 영역 메모리(new Student) -> 스택 영역에 주소를 보내준다
        int id(4)
        String name(4)
        String subject(4)

/////////////////////////////////////

데이터 영역(코드 & 상수)

코드
메서드
정적 자원
    - static
상수
리터럴 상수


/////////////////////////////////////




1. 디폴트 생성자
    - 생성자의 정의X -> 객체를 만드려면 반드시 필요한 메서드
    - 컴파일러 자동 추가
        public 클래스명(){

        }
2. 생성자 만들기
3. 생성자 오버로드

    참고) ex5)
        메서드 오버로드
            함수(메서드)시그니쳐 : 패기지명.클래스명.반환값.함수명.매개변수.예외전가
                - 시그니쳐가 같으면 함수 중복 정의(오류)
                - 시그니쳐가 다르면 다른 함수 정의

정보은닉
    - 멤버 변수에 값을 직접 대입 -> 지양 : 통제가 불가 하기 때문
    - 값을 지정하는 별도 메서드 정의 -> 외부 접근 가능한 접근 범위
    - 값을 조회하는 별도 메서드 정의 -> 외부 접근 가능한 접근 범위

        통제 불가능한 부분 - 감추기
        통제 가능한 수단
            -캡슐화
                (변화 - 감추고, 확장 -> 열기 - 전략 패턴)

1. 접근제어자 정리
    - public : 외부 패키지에서 접근 가능
    - protected : 동일 패키지에서만 접근 가능, 상속을 통하면 외부 패키지에서도 클래스 내부에서 접근 가능(default + private)
    - default : 접근제어자를 정의 X - 동일 패키지에서만 접근 가능
    - private : 클래스 내부에서만 접근 가능

    public > protected > default > private

    참고)
        다른 패키지의 클래스를 접근 하실때는
            import 패키지명.클래스명;

2. get(), set() 메서드
    관례적으로 get 멤버변수명()
              set 멤버변수명(...)
              - setter, getter

    참고) 
        String toString() 메서드
            - 참조 변수를 출력 -> 클래스 안에 정의된 toString메서드가 자동 호출
            -> 관례적으로 멤버 변수의 값을 출력하는 용도로 많이 사용

this 예약어
    지역변수
        - 모든 인스턴스 메서드의 지역 변수
        - 생성된 객체의 주소 : 클래스 내부에서만 사용 가능
        - 인스턴스 자원을 접근하기 위해서
        - this는 출처가 명확할때는 생략 가능

    메서드
        - 생성자 메서드를 클래스 내부에서 호출 : 주로 생성자 안에서 정의
        - this(...);

static 변수 : 정적 변수
    - static : 정적인
    - 데이터 영역에서 공간을 할당 받는 변수
    - 클래스 로더 -> 데이터 영역 구성될 때 변수가 된다(공간을 할당 받는다.)
    - 객체 생성과 관련 없는 변수
    - 정적 방법으로 접근 권장 : 클래스명.변수명
    - 클래스 변수

    정적인 메모리
        - 데이터 영역 메모리

    동적인 메모리
        - 스택 영역 메모리
        - 힙 영역 메모리

static 메서드 : 정적 메서드
    - 객체 생성과 관련없이 사용가능한 메서드
    - 클래스명.메서드명
    - 클래스 메서드
    - this 지역변수는 존재 X - 객체 생성과 관련 X
        - 인스턴스 자원은 사용 불가
    - 정적 자원(정적 변수, 정적 메서드) 사용 가능

    참고)
        인스턴스 메서드 : 처음부터 사용 가능한 정적 자원들은 접근 가능

변수의 유효범위
1.지역변수
    - 함수가 호출되었을때 스택에서 공간을 할당 받고, 실행이 끝나면 제거되는 변수
    - 함수 지역에서만 유효한 변수

2.멤버변수(인스턴스 변수)
    - 객체 생성시 힙에서 공간을 할당 받고, 참조가 끊기면 가비지 콜렉터(GC)제거

3.static 변수
    - 클래스 로더 -> 데이터 영역에서 생성, 애플리케이션이 종료 될때 제거

static 응용 - 싱글톤 패턴
    - 하나의 필요할때만 생성해서 객체 공유

참고)
    공유하는 변수, 메서드
    - 기능과 관령된 하나의 클래스를 가지고 객체를 많이 생성하는 경우가 적다
    - 기능과 관련된 클래스 -> 메서드를 static으로만 정의 하는경우가 있다
        예) java.lang.Math
    
    - static으로만 정의하면 처음부터 활성화, 메모리 공간을 차지: 사용하지 않아도 불필요한 메모리가 소비
    - 회원 가입

    만드는 방법
        1) 생성자의 접근 제어자를 private : 외부에서 생성 불가
        2) 객체를 클래스 내부에서 생성
        3) 외부에서 생성된 객체를 접근할 수 있는 메서드의 정의 

///////////////////////////

확장자다운!!
getter and setter 다운
toString 다운

F1키 또는 Ctrl + Shift + p

Gen 입력
-> toString 과 getter setter 선택

///////////////////////////