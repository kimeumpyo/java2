생성자
	- 클래스를 생성할 때 사용하는 함수
	- 클래스명과 동일한 함수
    - 데이터 영역 메모리(코드 && 상수 영역)
        - class -> 클래스 로더 -> 데이터 영역 코드 영역에 구성, Class 객체를 생성 - 클래스의 정보가 덤겨 있는 객체
        - 모든 클래스의 class 정적 변수, Object 클래스의 getClass()접근 가능
/////////////////////////////////////

    데이터 영역 메모리 -> new Student
        class Student
            int id
            String name
            String subject

            메스드 영역
            void study()...

    스택 영역 메모리

    main()
        stydent s1

    힙 영역 메모리(new Student) -> 스택 영역에 주소를 보내준다
        int id(4)
        String name(4)
        String subject(4)

/////////////////////////////////////

데이터 영역(코드 & 상수)

코드
메서드
정적 자원
    - static
상수
리터럴 상수


/////////////////////////////////////



1. 디폴트 생성자
    - 생성자의 정의X -> 객체를 만드려면 반드시 필요한 메서드
    - 컴파일러 자동 추가
        public 클래스명(){

        }
2. 생성자 만들기
3. 생성자 오버로드

    참고) ex5)
        메서드 오버로드
            함수(메서드)시그니쳐 : 패기지명.클래스명.반환값.함수명.매개변수.예외전가
                - 시그니쳐가 같으면 함수 중복 정의(오류)
                - 시그니쳐가 다르면 다른 함수 정의

정보은닉
 - 멤버 변수에 값을 직접 대입 -> 지양 : 통제가 불가 하기 때문

1. 접근제어자 정리
    - public : 외부 패키지에서 접근 가능
    - protected : 동일 패키지에서만 접근 가능, 상속을 통하면 외부 패키지에서도 클래스 내부에서 접근 가능(default + private)
    - default : 접근제어자를 정의 X - 동일 패키지에서만 접근 가능
    - private : 클래스 내부에서만 접근 가능

    public > protected > default > private

    참고)
        다른 패키지의 클래스를 접근 하실때는
            import 패키지명.클래스명;
            
2. get(), set() 메서드

this 예약어

static 변수